package testutil

import (
	"fmt"
	"time"
)

// SampleMigrations returns common test migrations
func SampleMigrations() []MigrationFile {
	return []MigrationFile{
		{
			Version: "20240101120000_initial",
			SQL: `CREATE DATABASE analytics ENGINE = Atomic COMMENT 'Analytics database';

CREATE DATABASE logs ENGINE = Atomic COMMENT 'Logs database';`,
		},
		{
			Version: "20240101120100_users_table",
			SQL: `CREATE TABLE analytics.users (
    id UInt64,
    email String,
    name String,
    created_at DateTime DEFAULT now(),
    metadata Map(String, String) DEFAULT map()
) ENGINE = MergeTree()
ORDER BY (id, created_at)
PARTITION BY toYYYYMM(created_at)
SETTINGS index_granularity = 8192;`,
		},
		{
			Version: "20240101120200_events_table",
			SQL: `CREATE TABLE analytics.events (
    id UInt64,
    user_id UInt64,
    event_type LowCardinality(String),
    timestamp DateTime DEFAULT now(),
    data String CODEC(ZSTD),
    properties Map(String, String) DEFAULT map()
) ENGINE = MergeTree()
ORDER BY (user_id, timestamp)
PARTITION BY toYYYYMM(timestamp)
TTL timestamp + INTERVAL 90 DAY
SETTINGS index_granularity = 8192;`,
		},
		{
			Version: "20240101120300_dictionaries",
			SQL: `CREATE DICTIONARY analytics.user_status_dict (
    id UInt64 IS_OBJECT_ID,
    status String INJECTIVE,
    description String DEFAULT 'Unknown'
) PRIMARY KEY id
SOURCE(HTTP(url 'http://api.example.com/user_status' format 'JSONEachRow'))
LAYOUT(HASHED())
LIFETIME(MIN 300 MAX 3600);`,
		},
		{
			Version: "20240101120400_views",
			SQL: `CREATE VIEW analytics.active_users AS
SELECT
    id,
    email,
    name
FROM analytics.users
WHERE created_at >= now() - INTERVAL 30 DAY;

CREATE MATERIALIZED VIEW analytics.daily_stats
ENGINE = MergeTree()
ORDER BY date
POPULATE
AS SELECT
    toDate(timestamp) as date,
    count() as total_events,
    uniq(user_id) as unique_users,
    countIf(event_type = 'login') as login_count
FROM analytics.events
GROUP BY date;`,
		},
	}
}

// DefaultSchema returns a standard test schema
func DefaultSchema() string {
	return `-- Main schema file for test project
-- Generated by housekeeper test utilities

-- housekeeper:import schemas/analytics/schema.sql
-- housekeeper:import schemas/logs/schema.sql
`
}

// AnalyticsSchema returns a test analytics database schema
func AnalyticsSchema() string {
	return `-- Analytics database schema

CREATE DATABASE IF NOT EXISTS analytics ENGINE = Atomic COMMENT 'Analytics database';

-- housekeeper:import tables/users.sql
-- housekeeper:import tables/events.sql
-- housekeeper:import dictionaries/user_status_dict.sql
-- housekeeper:import views/active_users.sql
-- housekeeper:import views/daily_stats.sql
`
}

// UsersTableSchema returns a test users table schema
func UsersTableSchema() string {
	return `CREATE TABLE IF NOT EXISTS analytics.users (
    id UInt64,
    email String,
    name String,
    created_at DateTime DEFAULT now(),
    updated_at DateTime DEFAULT now(),
    is_active UInt8 DEFAULT 1,
    metadata Map(String, String) DEFAULT map(),
    tags Array(String) DEFAULT [],
    profile Nested(
        key String,
        value String
    )
) ENGINE = MergeTree()
ORDER BY (id, created_at)
PARTITION BY toYYYYMM(created_at)
SETTINGS index_granularity = 8192
COMMENT 'User accounts table';`
}

// EventsTableSchema returns a test events table schema
func EventsTableSchema() string {
	return `CREATE TABLE IF NOT EXISTS analytics.events (
    id UInt64,
    user_id UInt64,
    session_id String,
    event_type LowCardinality(String),
    event_category Enum8('system' = 1, 'user' = 2, 'admin' = 3),
    timestamp DateTime DEFAULT now(),
    data String CODEC(ZSTD),
    properties Map(String, String) DEFAULT map(),
    ip_address IPv4,
    user_agent String,
    referer String
) ENGINE = MergeTree()
ORDER BY (user_id, timestamp, event_type)
PARTITION BY toYYYYMM(timestamp)
PRIMARY KEY (user_id, timestamp)
SAMPLE BY user_id
TTL timestamp + INTERVAL 90 DAY DELETE
SETTINGS index_granularity = 8192
COMMENT 'Event tracking table';`
}

// ComplexDictionarySchema returns a test dictionary with complex configuration
func ComplexDictionarySchema() string {
	return `CREATE DICTIONARY IF NOT EXISTS analytics.geo_data (
    id UInt64 IS_OBJECT_ID,
    country_code String INJECTIVE,
    country_name String DEFAULT 'Unknown',
    continent String DEFAULT 'Unknown',
    timezone String DEFAULT 'UTC',
    population UInt64 DEFAULT 0,
    parent_id UInt64 DEFAULT 0 HIERARCHICAL
) PRIMARY KEY id, country_code
SOURCE(
    CLICKHOUSE(
        host 'localhost'
        port 9000
        user 'default'
        password ''
        db 'reference'
        table 'countries'
    )
)
LAYOUT(COMPLEX_KEY_HASHED(size_in_cells 1000000))
LIFETIME(MIN 3600 MAX 86400)
SETTINGS(max_threads = 2, store_on_disk = 0)
COMMENT 'Geographic reference data';`
}

// MaterializedViewSchema returns a test materialized view schema
func MaterializedViewSchema() string {
	return `CREATE MATERIALIZED VIEW IF NOT EXISTS analytics.hourly_metrics
ENGINE = AggregatingMergeTree()
ORDER BY (date, hour, event_type)
POPULATE
AS SELECT
    toDate(timestamp) as date,
    toHour(timestamp) as hour,
    event_type,
    countState() as event_count,
    uniqState(user_id) as unique_users,
    avgState(toUInt64OrZero(extractJSONValue(data, '$.duration'))) as avg_duration,
    maxState(timestamp) as last_event_time
FROM analytics.events
GROUP BY date, hour, event_type;`
}

// ReplicatedTableSchema returns a test replicated table schema
func ReplicatedTableSchema() string {
	return `CREATE TABLE IF NOT EXISTS analytics.replicated_data ON CLUSTER '{cluster}' (
    id UInt64,
    shard_key UInt64,
    data String,
    version UInt32 DEFAULT 1,
    created_at DateTime DEFAULT now()
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/{database}/{table}', '{replica}')
ORDER BY (shard_key, id)
PARTITION BY toYYYYMM(created_at)
SETTINGS index_granularity = 8192;`
}

// TestSumFileContent returns a sample sum file content
func TestSumFileContent() string {
	return `h1:abc123def456=
20240101120000_initial.sql h1:hash1=
20240101120100_users_table.sql h1:hash2=
20240101120200_events_table.sql h1:hash3=
20240101120300_dictionaries.sql h1:hash4=
20240101120400_views.sql h1:hash5=`
}

// GenerateTimestampedMigration creates a migration with current timestamp
func GenerateTimestampedMigration(name, sql string) MigrationFile {
	timestamp := time.Now().UTC().Format("20060102150405")
	return MigrationFile{
		Version: fmt.Sprintf("%s_%s", timestamp, name),
		SQL:     sql,
	}
}

// MinimalMigrations returns a minimal set of migrations for basic testing
func MinimalMigrations() []MigrationFile {
	return []MigrationFile{
		{
			Version: "001_init",
			SQL:     `CREATE DATABASE test ENGINE = Atomic;`,
		},
		{
			Version: "002_users",
			SQL: `CREATE TABLE test.users (
    id UInt64,
    name String
) ENGINE = MergeTree() ORDER BY id;`,
		},
	}
}

// EmptyMigration returns an empty but valid migration
func EmptyMigration() MigrationFile {
	return MigrationFile{
		Version: "999_empty",
		SQL:     "-- Empty migration for testing\n",
	}
}

// InvalidMigration returns a migration with invalid SQL
func InvalidMigration() MigrationFile {
	return MigrationFile{
		Version: "999_invalid",
		SQL:     "INVALID SQL SYNTAX HERE;",
	}
}

// SchemaWithImports returns a schema file with import directives
func SchemaWithImports() string {
	return `-- Main schema with imports

-- housekeeper:import databases.sql
-- housekeeper:import tables/users.sql
-- housekeeper:import tables/events.sql
-- housekeeper:import views/reports.sql
`
}

// DatabasesSchema returns a schema file with database definitions
func DatabasesSchema() string {
	return `-- Database definitions

CREATE DATABASE IF NOT EXISTS analytics ENGINE = Atomic COMMENT 'Analytics database';
CREATE DATABASE IF NOT EXISTS logs ENGINE = Atomic COMMENT 'Logs database';
CREATE DATABASE IF NOT EXISTS staging ENGINE = Memory COMMENT 'Staging database';
`
}

// TestClickHouseXMLConfig returns a test ClickHouse XML configuration
func TestClickHouseXMLConfig(cluster string) string {
	if cluster == "" {
		cluster = "cluster"
	}
	return fmt.Sprintf(`<?xml version="1.0"?>
<clickhouse>
    <logger>
        <level>warning</level>
        <console>true</console>
    </logger>
    <listen_host>0.0.0.0</listen_host>
    <http_port>8123</http_port>
    <tcp_port>9000</tcp_port>
    <distributed_ddl>
        <path>/clickhouse/task_queue/ddl</path>
    </distributed_ddl>
    <macros>
        <cluster>%s</cluster>
        <shard>01</shard>
        <replica>01</replica>
    </macros>
    <remote_servers>
        <%s>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
        </%s>
    </remote_servers>
</clickhouse>`, cluster, cluster, cluster)
}

// TestHousekeeperYAMLConfig returns a test housekeeper.yaml configuration
func TestHousekeeperYAMLConfig(cluster, version, configDir string) string {
	if cluster == "" {
		cluster = "cluster"
	}
	if version == "" {
		version = "25.7"
	}
	if configDir == "" {
		configDir = "db/config.d"
	}
	return fmt.Sprintf(`# Housekeeper configuration
entrypoint: db/main.sql
dir: db/migrations

clickhouse:
  version: "%s"
  cluster: "%s"
  config_dir: "%s"
`, version, cluster, configDir)
}
