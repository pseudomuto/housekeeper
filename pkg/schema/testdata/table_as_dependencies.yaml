description: "CREATE TABLE AS with dependency propagation"
current_sql: |
  CREATE TABLE events_local (
      id UInt64,
      timestamp DateTime,
      event_type String
  ) ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE events_backup AS events_local ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE events_all ON CLUSTER cluster AS events_local 
  ENGINE = Distributed(cluster, currentDatabase(), events_local, rand());

target_sql: |
  CREATE TABLE events_local (
      id UInt64,
      timestamp DateTime,
      event_type String,
      user_id UInt64
  ) ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE events_backup AS events_local ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE events_all ON CLUSTER cluster AS events_local
  ENGINE = Distributed(cluster, currentDatabase(), events_local, rand());

expected_up_migration: |
  -- Alter table events_local
  
  ALTER TABLE events_local
      ADD COLUMN user_id UInt64
  
  -- Propagated from events_local (AS dependency)
  ALTER TABLE events_backup
      ADD COLUMN user_id UInt64
  
  -- Recreate to match schema changes from events_local
  DROP TABLE events_all;
  CREATE TABLE events_all (
      id UInt64,
      timestamp DateTime,
      event_type String,
      user_id UInt64
  )
  ENGINE = Distributed(cluster, currentDatabase(), events_local, rand())

expected_down_migration: |
  -- Alter table events_local
  
  ALTER TABLE events_local
      DROP COLUMN user_id
  
  ALTER TABLE events_backup
      DROP COLUMN user_id
  
  DROP TABLE events_all;
  CREATE TABLE events_all (
      id UInt64,
      timestamp DateTime,
      event_type String
  )
  ENGINE = Distributed(cluster, currentDatabase(), events_local, rand())

---
description: "CREATE TABLE AS - source table dropped (no propagation)"
current_sql: |
  CREATE TABLE base (
      id UInt64,
      name String
  ) ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE base_copy AS base ENGINE = MergeTree() ORDER BY id;

target_sql: |
  CREATE TABLE base_copy AS base ENGINE = MergeTree() ORDER BY id;

expected_up_migration: |
  -- Drop table base
  
  DROP TABLE base

expected_down_migration: |
  -- Create table base
  
  CREATE TABLE base (
      id UInt64,
      name String
  )
  ENGINE = MergeTree()
  ORDER BY id

---
description: "CREATE TABLE AS - multiple dependents with different engines"
current_sql: |
  CREATE TABLE users (
      id UInt64,
      name String
  ) ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE users_backup AS users ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE users_memory AS users ENGINE = Memory;
  
  CREATE TABLE users_dist ON CLUSTER cluster AS users 
  ENGINE = Distributed(cluster, currentDatabase(), users, rand());

target_sql: |
  CREATE TABLE users (
      id UInt64,
      name String,
      email String DEFAULT ''
  ) ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE users_backup AS users ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE users_memory AS users ENGINE = Memory;
  
  CREATE TABLE users_dist ON CLUSTER cluster AS users
  ENGINE = Distributed(cluster, currentDatabase(), users, rand());

expected_up_migration: |
  -- Alter table users
  
  ALTER TABLE users
      ADD COLUMN email String DEFAULT ''
  
  -- Propagated from users (AS dependency)
  ALTER TABLE users_backup
      ADD COLUMN email String DEFAULT ''
  
  -- Recreate to match schema changes from users
  DROP TABLE users_memory;
  CREATE TABLE users_memory (
      id UInt64,
      name String,
      email String DEFAULT ''
  )
  ENGINE = Memory
  
  -- Recreate to match schema changes from users
  DROP TABLE users_dist;
  CREATE TABLE users_dist (
      id UInt64,
      name String,
      email String DEFAULT ''
  )
  ENGINE = Distributed(cluster, currentDatabase(), users, rand())

expected_down_migration: |
  -- Alter table users
  
  ALTER TABLE users
      DROP COLUMN email
  
  ALTER TABLE users_backup
      DROP COLUMN email
  
  DROP TABLE users_memory;
  CREATE TABLE users_memory (
      id UInt64,
      name String
  )
  ENGINE = Memory
  
  DROP TABLE users_dist;
  CREATE TABLE users_dist (
      id UInt64,
      name String
  )
  ENGINE = Distributed(cluster, currentDatabase(), users, rand())

---
description: "CREATE TABLE AS - new table with AS reference"
current_sql: |
  CREATE TABLE base (
      id UInt64,
      name String
  ) ENGINE = MergeTree() ORDER BY id;

target_sql: |
  CREATE TABLE base (
      id UInt64,
      name String
  ) ENGINE = MergeTree() ORDER BY id;
  
  CREATE TABLE base_dist ON CLUSTER cluster AS base 
  ENGINE = Distributed(cluster, currentDatabase(), base, cityHash64(id));

expected_up_migration: |
  -- Create table base_dist
  
  CREATE TABLE base_dist (
      id UInt64,
      name String
  )
  ENGINE = Distributed(cluster, currentDatabase(), base, cityHash64(id))

expected_down_migration: |
  -- Drop table base_dist
  
  DROP TABLE base_dist